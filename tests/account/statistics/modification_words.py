import pytest

from services.word_modifications import modification__city
from services.word_modifications.modification__city import modification__city
from services.word_modifications.modification__visited import modification__visited
from services.word_modifications.modification_region import *


@pytest.mark.parametrize(
    'quantity, word', (
            (1, 'город'),
            (2, 'города'),
            (3, 'города'),
            (4, 'города'),
            (5, 'городов'),
            (6, 'городов'),
            (7, 'городов'),
            (8, 'городов'),
            (9, 'городов'),
            (10, 'городов'),
            (11, 'городов'),
            (12, 'городов'),
            (13, 'городов'),
            (14, 'городов'),
            (15, 'городов'),
            (16, 'городов'),
            (17, 'городов'),
            (18, 'городов'),
            (19, 'городов'),
            (20, 'городов'),
            (21, 'город'),
            (22, 'города'),
            (33, 'города'),
            (44, 'города'),
            (55, 'городов'),
            (66, 'городов'),
            (77, 'городов'),
            (88, 'городов'),
            (99, 'городов'),
            (100, 'городов'),
            (111, 'городов'),
            (119, 'городов'),
            (200, 'городов'),
            (300, 'городов'),
            (400, 'городов'),
            (101, 'город'),
            (201, 'город'),
            (333, 'города'),
            (444, 'города'),
            (1001, 'город'),
            (1011, 'городов'),
            (1024, 'города'),
            (1037, 'городов'),
            (1111, 'городов'),
            (1137, 'городов'),
    )
)
def test__modification_city(quantity, word):
    assert modification__city(quantity) == word


@pytest.mark.parametrize(
    'quantity, word', (
        (1, 'регион'),
        (2, 'региона'),
        (3, 'региона'),
        (4, 'региона'),
        (5, 'регионов'),
        (6, 'регионов'),
        (7, 'регионов'),
        (8, 'регионов'),
        (9, 'регионов'),
        (10, 'регионов'),
        (11, 'регионов'),
        (12, 'регионов'),
        (13, 'регионов'),
        (14, 'регионов'),
        (15, 'регионов'),
        (16, 'регионов'),
        (17, 'регионов'),
        (18, 'регионов'),
        (19, 'регионов'),
        (20, 'регионов'),
        (21, 'регион'),
        (22, 'региона'),
        (31, 'регион'),
        (33, 'региона'),
        (44, 'региона'),
        (55, 'регионов'),
        (66, 'регионов'),
        (77, 'регионов'),
        (88, 'регионов'),
        (99, 'регионов'),
        (100, 'регионов')
    )
)
def test__modification_region__accusative_case(quantity, word):
    assert modification__region__accusative_case(quantity) == word


@pytest.mark.parametrize(
    'quantity, word', (
        (1, 'регионе'),
        (2, 'регионах'),
        (3, 'регионах'),
        (4, 'регионах'),
        (5, 'регионах'),
        (6, 'регионах'),
        (7, 'регионах'),
        (8, 'регионах'),
        (9, 'регионах'),
        (10, 'регионах'),
        (11, 'регионах'),
        (12, 'регионах'),
        (13, 'регионах'),
        (14, 'регионах'),
        (15, 'регионах'),
        (16, 'регионах'),
        (17, 'регионах'),
        (18, 'регионах'),
        (19, 'регионах'),
        (20, 'регионах'),
        (21, 'регионе'),
        (22, 'регионах'),
        (31, 'регионе'),
        (33, 'регионах'),
        (44, 'регионах'),
        (55, 'регионах'),
        (66, 'регионах'),
        (77, 'регионах'),
        (88, 'регионах'),
        (99, 'регионах'),
        (100, 'регионах')
    )
)
def test__modification_region__prepositional_case(quantity, word):
    assert modification__region__prepositional_case(quantity) == word


@pytest.mark.parametrize(
    'quantity, word', (
        (1, 'посещён'),
        (2, 'посещено'),
        (3, 'посещено'),
        (4, 'посещено'),
        (5, 'посещено'),
        (6, 'посещено'),
        (7, 'посещено'),
        (8, 'посещено'),
        (9, 'посещено'),
        (10, 'посещено'),
        (11, 'посещено'),
        (12, 'посещено'),
        (13, 'посещено'),
        (14, 'посещено'),
        (15, 'посещено'),
        (16, 'посещено'),
        (17, 'посещено'),
        (18, 'посещено'),
        (19, 'посещено'),
        (20, 'посещено'),
        (21, 'посещён'),
        (22, 'посещено'),
        (31, 'посещён'),
        (33, 'посещено'),
        (44, 'посещено'),
        (55, 'посещено'),
        (66, 'посещено'),
        (77, 'посещено'),
        (88, 'посещено'),
        (99, 'посещено'),
        (100, 'посещено')
    )
)
def test__modification_visited(quantity, word):
    assert modification__visited(quantity) == word
