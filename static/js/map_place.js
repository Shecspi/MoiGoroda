import {create_map} from './map.js';
import {icon_blue_pin, icon_purple_pin} from "./icons.js";
import {showDangerToast, showSuccessToast} from './toast.js';

window.add_place = add_place;
window.switch_place_to_edit = switch_place_to_edit;

// –ö–∞—Ä—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
const map = create_map([55.7520251, 37.61841444746334], 15);

// –ú–∞—Å—Å–∏–≤, —Ö—Ä–∞–Ω—è—â–∏–π –≤ —Å–µ–±–µ –ø—Ä–æ–º–∏—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
const allPromises = [];

// –ú–∞—Å—Å–∏–≤, —Ö—Ä–∞–Ω—è—â–∏–π –≤ —Å–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö.
// –ú–æ–∂–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è—Ç—å—Å—è –∏ —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –≤—Å—é —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
// –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ.
const allPlaces = new Map();

// –ú–∞—Å—Å–∏–≤, —Ö—Ä–∞–Ω—è—â–∏–π –≤ —Å–µ–±–µ –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É –º–∞—Ä–∫–µ—Ä—ã.
const allMarkers = [];
const allCategories = [];

let moved_lat = undefined;
let moved_lon = undefined;

// –°–ª–æ–≤–∞—Ä—å, —Ö—Ä–∞–Ω—è—â–∏–π –≤ —Å–µ–±–µ –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ OSM —Ç–µ–≥–∏ –∏ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
const tags = new Map();
let marker = undefined;

allPromises.push(loadPlacesFromServer());
allPromises.push(loadCategoriesFromServer());
Promise.all([...allPromises]).then(([places, categories]) => {
    places.forEach(place => {
        allPlaces.set(place.id, place);
    });
    addMarkers();

    const button = document.getElementById('btn-filter-category');
    const select_filter_by_category = document.getElementById('dropdown-menu-filter-category')

    button.disabled = false;
    button.innerHTML = '<i class="fa-solid fa-layer-group"></i>';

    categories.forEach(category => {
        allCategories.push(category);
        category.tags_detail.forEach(tag => {
            tags.set(tag.name, category.name);
        });

        const filter_by_category_item = document.createElement('a');
        filter_by_category_item.classList.add('dropdown-item');
        filter_by_category_item.innerHTML = category.name;
        filter_by_category_item.style.cursor = 'pointer';
        filter_by_category_item.addEventListener('click', () => {
            updateMarkers(category.name);
        });
        select_filter_by_category.appendChild(document.createElement('li').appendChild(filter_by_category_item))
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    const divider = document.createElement('hr');
    divider.classList.add('dropdown-divider')
    select_filter_by_category.appendChild(document.createElement('li').appendChild(divider));

    const all_categories = document.createElement('a');
    all_categories.classList.add('dropdown-item');
    all_categories.innerHTML = '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    all_categories.style.cursor = 'pointer';
    select_filter_by_category.appendChild(document.createElement('li').appendChild(all_categories));
    all_categories.addEventListener('click', () => {
        updateMarkers('__all__');
    });

    handleClickOnMap(map);
});

function loadCategoriesFromServer() {
    return fetch('/api/place/category/')
        .then(response => {
            if (!response.ok) {
                throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }
            return response.json();
        })
        .then(data => {
            return data;
        });
}

function loadPlacesFromServer() {
    return fetch('/api/place/')
        .then(response => {
            if (!response.ok) {
                throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }
            return response.json();
        })
        .then(places => {
            return places;
        });
}

function handleClickOnMap(map) {
    map.addEventListener('click', function (ev) {
        const lat = ev.latlng.lat;
        const lon = ev.latlng.lng;
        moved_lon = undefined;
        moved_lat = undefined;

        let url = `https://nominatim.openstreetmap.org/reverse?email=shecspi@yandex.ru&format=jsonv2&lat=${lat}&lon=${lon}&addressdetails=0&zoom=18&layer=natural,poi`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (marker !== undefined) {
                    map.removeLayer(marker);
                }

                let name;
                let lat_marker;
                let lon_marker;
                let type_marker;

                if (data.hasOwnProperty('error')) {
                    name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç';
                    lat_marker = lat;
                    lon_marker = lon;
                } else {
                    if (data.name !== '') {
                        name = data.name;
                    } else if (data.display_name !== '') {
                        name = data.display_name;
                    } else {
                        name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç';
                    }
                    lat_marker = data.lat;
                    lon_marker = data.lon;
                }
                let name_escaped = name.replaceAll('"', "'");

                if (data.type !== undefined) {
                    if (tags.has(data.type)) {
                        type_marker = tags.get(data.type);
                    }
                }

                marker = L.marker(
                    [lat_marker, lon_marker],
                    {
                        icon: icon_purple_pin,
                        draggable: true,
                        bounceOnAdd: true
                    }
                ).addTo(map);

                allMarkers.push(marker);

                let content = '<form>';
                content += '<h5 id="place_name_from_osm" style="display: flex; justify-content: space-between;" onclick="switch_place_to_edit()">';
                content += `${name}`;
                content += ` <a href="#"><i class="fa-solid fa-pencil"></i></a>`;
                content += '</h5>';

                content += '<h5 id="place_name_input_form" style="display: flex; justify-content: space-between;" hidden>';
                content += `<input type="text" id="form-name" name="name" value="${name_escaped}" class="form-control-sm" style="width: 100%; box-sizing: border-box">`;
                content += '</h5>';

                content += '<p>'
                content += `<span class="fw-semibold">–®–∏—Ä–æ—Ç–∞:</span> ${lat_marker}<br>`;
                content += `<input type="text" id="form-latitude" name="latitude" value="${lat_marker}" hidden>`;

                content += `<span class="fw-semibold">–î–æ–ª–≥–æ—Ç–∞:</span> ${lon_marker}`;
                content += `<input type="text" id="form-longitude" name="longitude" value="${lon_marker}" hidden>`;
                content += '</p>';

                content += '<p id="category_from_osm">';
                content += '<span class="fw-semibold">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span> ';
                content += ` ${type_marker !== undefined ? type_marker : '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'}`
                content += '</p>';

                content += '<p id="category_select_form" hidden>'
                content += '<span class="fw-semibold">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span> ';
                content += '<select name="category" id="form-type-object" class="form-select form-select-sm">';
                if (type_marker === undefined) {
                    content += `<option value="" selected disabled>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é...</option>`;
                }
                allCategories.forEach(category => {
                    if (category.name === type_marker) {
                        content += `<option value="${category.id}" selected>${category.name}</option>`;
                    } else {
                        content += `<option value="${category.id}">${category.name}</option>`;
                    }
                })
                content += `<option value="other">–î—Ä—É–≥–æ–µ</option>`;
                content += '</select>';
                content += '</p>';

                content += '<p>';
                content += `<button class="btn btn-success btn-sm" id="btn-add-place" onclick="add_place(event);">–î–æ–±–∞–≤–∏—Ç—å</button>`;
                content += '</p>';

                content += '</form>'

                marker.bindPopup(content);
                marker.openPopup();

                marker.on("dragend", function (e) {
                    moved_lat = e.target.getLatLng().lat;
                    moved_lon = e.target.getLatLng().lng;
                });
            });
    });
}

function add_place(event) {
    event.preventDefault();

    const data = {
        name: document.getElementById('form-name').value,
        category: document.getElementById('form-type-object').value
    };

    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –º–∞—Ä–∫–µ—Ä –∏–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (moved_lat === undefined) {
        data.latitude = document.getElementById('form-latitude').value;
        data.longitude = document.getElementById('form-longitude').value;
    } else {
        data.latitude = moved_lat;
        data.longitude = moved_lon;
    }

    if (data.latitude === "" || data.longitude === "") {
        showDangerToast('–û—à–∏–±–∫–∞', '–ù–µ —É–∫–∞–∑–∞–Ω—ã <strong>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</strong> –æ–±—ä–µ–∫—Ç–∞.<br>–°—Ç—Ä–∞–Ω–Ω–æ, —ç—Ç–æ –ø–æ–ª–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü—Ä–∏–∑–Ω–∞–≤–∞–π—Ç–µ—Å—å, –≤—ã —á—Ç–æ-—Ç–æ –∑–∞–º—ã—à–ª—è–µ—Ç–µ? üßê');
        return false;
    }

    if (data.name === "" || data.category === "") {
        showDangerToast('–û—à–∏–±–∫–∞', '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ <strong>–∏–º—è</strong> –∏ <strong>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</strong>.<br>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º.');
        return false;
    }

    fetch('/api/place/create/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            'X-CSRFToken': getCookie("csrftoken")
        },
        body: JSON.stringify(data)
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }
            return response.json()
        })
        .then(data => {
            allPlaces.set(data.id, data);
            updateMarkers();
            showSuccessToast('–î–æ–±–∞–≤–ª–µ–Ω–æ', '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –í–∞–º–∏ –º–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')
        })
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã —Å –∫–∞—Ä—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –∑–∞–Ω–æ–≥–æ.
 */
function updateMarkers(categoryName) {
    allMarkers.forEach(marker => {
        map.removeLayer(marker);
    });
    addMarkers(categoryName);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É.
 */
function addMarkers(categoryName) {
    allMarkers.length = 0;
    allPlaces.forEach(place => {
        if (categoryName === undefined || categoryName === '__all__' || categoryName === place.category_detail.name) {
            console.log(categoryName);
            const marker = L.marker(
                [place.latitude, place.longitude],
                {
                    icon: icon_blue_pin
                }).addTo(map);
            marker.bindTooltip(place.name, {direction: 'top'});

            allMarkers.push(marker);
        }
    });
}

function switch_place_to_edit() {
    document.getElementById('place_name_from_osm').hidden = true;
    document.getElementById('place_name_input_form').hidden = false;

    document.getElementById('category_from_osm').hidden = true;
    document.getElementById('category_select_form').hidden = false;
}
