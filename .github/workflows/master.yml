name: Deploy to the server
on:
    push:
      branches: ["master"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.12'

      - name: Create .env file
        run: cp MoiGoroda/.env.example MoiGoroda/.env

      - name: Poetry install
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up Poetry
        run: poetry install --no-interaction --no-root && poetry install --no-interaction

      - name: Test with pytest
        run: poetry run pytest
  deploy:
    needs: test
    runs-on: [self-hosted, prod]
    steps:
      - uses: actions/checkout@v1
      - name: Deploy to 92.255.77.19
        run: |
          : # Переходим в папку с проектом
          cd ${{ secrets.PROD__PROJECT_PATH }}
          
          : # Устанавливаем необходимую версию Python, если она ещё не установлена
          if [[ "$(pyenv versions 2> /dev/null)" != *"$(cat .python-version )"* ]]; then pyenv install $(cat .python-version); fi
          
          : # Удаляем виртуальное окружение и создаём новое на основе той версии Python,
          : # которая указана в .python-version
          if [ -n $(poetry env info -p) ]; then rm -rf $(poetry env info -p); fi
          poetry env use $(cat .python-version)
          poetry install --only main
          
          : # Для того чтобы в конфиге Gunicorn прописать путь к исполняемому файлу,
          : # нужно создать символичесвую ссылку на файл, находящийся в папке с виртуальным окружением.
          : # Имя папки может меняться, поэтому нужен такой ход.
          rm -f ~/gunicorn
          ln -s $(poetry env info -p)/bin/gunicorn ~/gunicorn
          
          git pull origin master
          git checkout master
          
          poetry run python3 manage.py makemigrations
          poetry run python3 manage.py migrate
          
          : # Производим сборку статичных файлов
          chmod +x ./scripts/collectstatic.sh
          ./scripts/collectstatic.sh
          chmod -x ./scripts/collectstatic.sh
          
          : # Перезагружаем сервер
          chmod +x ./scripts/restart.sh
          export SUDO_PASSWORD=${{ secrets.PROD__SUDO_PASSWORD }}
          ./scripts/restart.sh
          chmod -x ./scripts/restart.sh
