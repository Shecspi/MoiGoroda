import pytest

from utils.VisitedCityMixin import VisitedCityMixin


@pytest.mark.parametrize(
    'num, word', (
        (1, 'город'),
        (2, 'города'),
        (3, 'города'),
        (4, 'города'),
        (5, 'городов'),
        (6, 'городов'),
        (7, 'городов'),
        (8, 'городов'),
        (9, 'городов'),
        (10, 'городов'),
        (11, 'городов'),
        (12, 'городов'),
        (13, 'городов'),
        (14, 'городов'),
        (15, 'городов'),
        (16, 'городов'),
        (17, 'городов'),
        (18, 'городов'),
        (19, 'городов'),
        (20, 'городов'),
        (21, 'город'),
        (22, 'города'),
        (33, 'города'),
        (44, 'города'),
        (55, 'городов'),
        (66, 'городов'),
        (77, 'городов'),
        (88, 'городов'),
        (99, 'городов'),
        (100, 'городов'),
        (111, 'городов'),
        (119, 'городов'),
        (200, 'городов'),
        (300, 'городов'),
        (400, 'городов'),
        (101, 'город'),
        (201, 'город'),
        (333, 'города'),
        (444, 'города'),
        (1001, 'город'),
        (1011, 'городов'),
        (1024, 'города'),
        (1037, 'городов'),
        (1111, 'городов'),
        (1137, 'городов'),
    )
)
def test__declension_of_city(quantity, word):
    mixin = VisitedCityMixin()

    assert mixin.declension_of_city(quantity) == word


@pytest.mark.parametrize(
    'num, word', (
        (1, 'Посещён'),
        (2, 'Посещено'),
        (3, 'Посещено'),
        (4, 'Посещено'),
        (5, 'Посещено'),
        (6, 'Посещено'),
        (7, 'Посещено'),
        (8, 'Посещено'),
        (9, 'Посещено'),
        (10, 'Посещено'),
        (11, 'Посещено'),
        (12, 'Посещено'),
        (13, 'Посещено'),
        (14, 'Посещено'),
        (15, 'Посещено'),
        (16, 'Посещено'),
        (17, 'Посещено'),
        (18, 'Посещено'),
        (19, 'Посещено'),
        (20, 'Посещено'),
        (21, 'Посещён'),
        (22, 'Посещено'),
        (33, 'Посещено'),
        (44, 'Посещено'),
        (55, 'Посещено'),
        (66, 'Посещено'),
        (77, 'Посещено'),
        (88, 'Посещено'),
        (99, 'Посещено'),
        (100, 'Посещено'),
        (111, 'Посещено'),
        (119, 'Посещено'),
        (201, 'Посещён'),
        (300, 'Посещено'),
        (400, 'Посещено'),
        (101, 'Посещён'),
        (201, 'Посещён'),
        (333, 'Посещено'),
        (444, 'Посещено'),
        (1001, 'Посещён'),
        (1011, 'Посещено'),
        (1024, 'Посещено'),
        (1037, 'Посещено'),
        (1111, 'Посещено'),
        (1137, 'Посещено'),
    )
)
def test__declension_of_visited(quantity, word):
    mixin = VisitedCityMixin()

    assert mixin.declension_of_visited(quantity) == word
